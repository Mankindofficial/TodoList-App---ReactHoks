{"version":3,"sources":["TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","useState","name","setName","useReducer","todos","action","type","payload","data","title","id","Date","now","completed","map","todo","filter","dispatch","Todo","className","onClick","style","color","textDecoration","value","useEffect","fetch","then","response","json","key","Math","random","onSubmit","e","preventDefault","placeholder","onChange","target","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1a11dec5.chunk.js","sourcesContent":["import React, { useState, useReducer, useEffect } from 'react';\r\n\r\nfunction TodoList() {\r\n\r\n\tconst [name, setName] = useState('');\r\n\tconst [todos, dispatch] = useReducer(reducer, []);\r\n\tfunction reducer(todos, action) {\r\n\t\tswitch(action.type){\r\n\t\t\tcase('start'):\r\n\t\t\t\treturn action.payload.data;\r\n\t\t\tcase('add'):\r\n\t\t\t\treturn [...todos, newTodo(action.payload.title)];\r\n\t\t\tcase('toggle'):\r\n\t\t\t\treturn todos.map(todo => {\r\n\t\t\t\t\tif(todo.id === action.payload.id){\r\n\t\t\t\t\t\treturn { ...todo, completed: !todo.completed }\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn todo;\r\n\t\t\t\t});\r\n\t\t\tcase('delete'):\r\n\t\t\t\treturn todos.filter(todo => todo.id !== action.payload.id);\r\n\t\t\tdefault:\r\n\t\t\t\treturn todos;\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tfetch(`https://jsonplaceholder.typicode.com/todos?_limit=5`)\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({type:'start', payload:{data:data}}));\r\n\r\n\t}, [])\r\n\r\n\tfunction Todo({todo, dispatch}) {\r\n\r\n\t\treturn(\r\n\t\t\t<div className=\"todo\">\r\n\t\t\t\t<input type=\"checkbox\" \r\n\t\t\t\t\tclassName=\"check\"\r\n\t\t\t\t\tonClick={() => dispatch({type:'toggle', payload:{id:todo.id}})} />\r\n\t\t\t\t<span style={{color: todo.completed ? 'brown' : 'green', textDecoration: todo.completed ? 'line-through' : ''}}>{todo.title}</span>\r\n\t\t\t\t<input type=\"submit\" \r\n\t\t\t\t\tclassName=\"del\"\r\n\t\t\t\t\tonClick={() => {dispatch({type:'delete', payload:{id:todo.id}})}} \r\n\t\t\t\t\tvalue=\"x\"/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tfunction newTodo(title) {\r\n\t\treturn {id:Date.now(), title:title, completed:false}\r\n\t}\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault();\r\n\t\tdispatch({type:'add', payload: {title:name}});\r\n\t\tsetName('');\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div className=\"todoList\">\r\n\t\t\t{todos.map(todo => (\r\n\t\t\t\t\t<Todo key={Math.random()} todo={todo} dispatch={dispatch}/>\r\n\t\t\t))}\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<input type=\"text\" placeholder=\"Add New Todo Here...\" className=\"addTodo\" value={name} onChange={(e) => setName(e.target.value)}/>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport TodoList from './TodoList';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\r\n\treturn(\r\n\t\t<div className=\"App\" >\r\n\t\t\t<header className=\"header\">Todo App Using React Hooks</header>\r\n\t\t\t<TodoList />\r\n\t\t\t<footer className=\"footer\">Made by @Mankind_ Copyright &copy; 2020</footer>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}